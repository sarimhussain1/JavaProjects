package shussain;

public class linkedSortedList<T extends Comparable<? super T>> implements SortedListInterface<T>
{
	private Node firstNode;
	private int numberOfEntries;
	
	public linkedSortedList()
	{
		firstNode = null;
		numberOfEntries = 0;
	}
	
	@Override
	public void add(T newEntry) 
	{
		Node newNode = new Node(newEntry);
		Node nodeBefore = getNodeBefore(newEntry);
		
		if(isEmpty() || (nodeBefore == null))
		{
			newNode.setNextNode(firstNode);
			firstNode = newNode;
		}
		else
		{
			Node nodeAfter = nodeBefore.getNextNode();
			newNode.setNextNode(nodeAfter);
			nodeBefore.setNextNode(newNode);
		}
		numberOfEntries++;
	}

	private Node getNodeBefore(T anEntry) 
	{
		Node currentNode = firstNode;
		Node nodeBefore = null;
		
		while((currentNode != null) && anEntry.compareTo(currentNode.getData()) > 0)
		{
			nodeBefore = currentNode;
			currentNode = currentNode.getNextNode();
		}
		
		return nodeBefore;
	}

	@Override
	public boolean remove(T anEntry) 
	{
		return false;
	}

	@Override
	public int getPosition(T anEntry)
	{
		boolean found = false;
		int position = 1;
		Node currentNode = firstNode;
		while(found == false && currentNode != null)
		{
			if(anEntry.equals(currentNode.getData()))
			{
				found = true;
			}
			else
			{
				currentNode = currentNode.getNextNode();
				position++;
			}
		}
		return position;
	}

	@Override
	public T getEntry(int givenPosition)
	{
		if ((givenPosition >= 1) && (givenPosition <= numberOfEntries))
	      {
	         return getNodeAt(givenPosition).getData();
	      }
	      else
	         throw new IndexOutOfBoundsException("Illegal position given.");
	}

	private Node getNodeAt(int givenPosition)
	{
	      Node currentNode = firstNode;
	      
	      for (int counter = 1; counter < givenPosition; counter++)
	      {
	    	  currentNode = currentNode.getNextNode();  
	      }

	      return currentNode;
	}
	
	@Override
	public boolean contains(T anEntry) 
	{
		boolean found = false;
	      Node currentNode = firstNode;
	      
	      while (!found && (currentNode != null))
	      {
	         if (anEntry.equals(currentNode.getData()))
	         {
	        	 found = true;
	         }
	         else
	         {
	        	 currentNode = currentNode.getNextNode();
	         }
	      } 
	      
	      return found;
	}

	@Override
	public T remove(int givenPosition)
	{
		 T result = null;                    
	      if ((givenPosition >= 1) && (givenPosition <= numberOfEntries))
	      {
	         if (givenPosition == 1)                 
	         {
	            result = firstNode.getData();        
	            firstNode = firstNode.getNextNode();
	         }
	         else                                   
	         {
	            Node nodeBefore = getNodeAt(givenPosition - 1);
	            Node nodeToRemove = nodeBefore.getNextNode();
	            result = nodeToRemove.getData();   
	            Node nodeAfter = nodeToRemove.getNextNode();
	            nodeBefore.setNextNode(nodeAfter);  
	        } 
	         
	         numberOfEntries--;                     
	         return result;                         
	      }
	      else
	         throw new IndexOutOfBoundsException("Illegal position given.");
	}

	@Override
	public void clear()
	{
		firstNode = null;
	    numberOfEntries = 0;
	}

	@Override
	public int getLength() 
	{
		return numberOfEntries;
	}

	@Override
	public boolean isEmpty() 
	{
		return numberOfEntries == 0;
	}

	@Override
	public T[] toArray()
	{
		@SuppressWarnings("unchecked")
		T[] result = (T[])new Comparable[numberOfEntries];
	      
	      int index = 0;
	      Node currentNode = firstNode;
	      while ((index < numberOfEntries) && (currentNode != null))
	      {
	         result[index] = currentNode.getData();
	         currentNode = currentNode.getNextNode();
	         index++;
	      } 
	      
	      return result;
	}
	
	private class Node
	{
		private T data;
		private Node nextNode;;
		
		private Node(T dataPortion)
		{
			data = dataPortion;
			nextNode = null;
		}
		
		private Node(T dataPortion, Node next)
		{
			data = dataPortion;
			nextNode = next;
		}

		private T getData()
		{
			return data;
		}

		@SuppressWarnings("unused")
		private void setData(T data)
		{
			this.data = data;
		}

		private Node getNextNode()
		{
			return nextNode;
		}

		private void setNextNode(Node nextNode)
		{
			this.nextNode = nextNode;
		}
	}
}
